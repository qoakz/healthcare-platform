# Generated by Django 4.2.7 on 2025-09-04 19:43

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Encounter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encounter_type', models.CharField(choices=[('consultation', 'Consultation'), ('follow_up', 'Follow-up'), ('emergency', 'Emergency'), ('routine', 'Routine Checkup')], default='consultation', max_length=20)),
                ('chief_complaint', models.TextField()),
                ('history_of_present_illness', models.TextField(blank=True)),
                ('vital_signs', models.JSONField(default=dict, help_text='Blood pressure, heart rate, temperature, etc.')),
                ('physical_examination', models.TextField(blank=True)),
                ('assessment', models.TextField()),
                ('diagnosis_codes', models.JSONField(default=list, help_text='ICD-10 codes')),
                ('plan', models.TextField()),
                ('clinical_notes', models.TextField(blank=True)),
                ('follow_up_instructions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Encounter',
                'verbose_name_plural': 'Encounters',
                'db_table': 'emr_encounter',
            },
        ),
        migrations.CreateModel(
            name='MedicalDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('lab_report', 'Lab Report'), ('imaging', 'Imaging Report'), ('prescription', 'Prescription'), ('discharge_summary', 'Discharge Summary'), ('consultation_note', 'Consultation Note'), ('insurance_card', 'Insurance Card'), ('id_document', 'ID Document'), ('other', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('file_url', models.URLField(help_text='S3 URL to the document')),
                ('file_name', models.CharField(max_length=255)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('mime_type', models.CharField(max_length=100)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Medical Document',
                'verbose_name_plural': 'Medical Documents',
                'db_table': 'files_document',
            },
        ),
        migrations.CreateModel(
            name='MedicalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chronic_conditions', models.JSONField(default=list, help_text='List of chronic medical conditions')),
                ('allergies', models.JSONField(default=list, help_text='List of allergies and reactions')),
                ('current_medications', models.JSONField(default=list, help_text='Current medications')),
                ('family_history', models.TextField(blank=True)),
                ('smoking_status', models.CharField(blank=True, max_length=20)),
                ('alcohol_consumption', models.CharField(blank=True, max_length=20)),
                ('exercise_habits', models.CharField(blank=True, max_length=50)),
                ('surgical_history', models.JSONField(default=list, help_text='List of past surgeries')),
                ('immunizations', models.JSONField(default=list, help_text='List of immunizations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Medical History',
                'verbose_name_plural': 'Medical Histories',
                'db_table': 'emr_medical_history',
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medications', models.JSONField(help_text='List of prescribed medications with dosages')),
                ('instructions', models.TextField(help_text='General instructions for all medications')),
                ('prescription_date', models.DateField()),
                ('valid_until', models.DateField()),
                ('refills_allowed', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='active', max_length=20)),
                ('pdf_url', models.URLField(blank=True, help_text='S3 URL to prescription PDF')),
                ('pdf_generated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Prescription',
                'verbose_name_plural': 'Prescriptions',
                'db_table': 'emr_prescription',
            },
        ),
        migrations.CreateModel(
            name='Vitals',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, null=True)),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, null=True)),
                ('heart_rate', models.PositiveIntegerField(blank=True, null=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, null=True)),
                ('oxygen_saturation', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('bmi', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('notes', models.TextField(blank=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('encounter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vitals', to='emr.encounter')),
            ],
            options={
                'verbose_name': 'Vital Signs',
                'verbose_name_plural': 'Vital Signs',
                'db_table': 'emr_vitals',
                'ordering': ['-recorded_at'],
            },
        ),
    ]
